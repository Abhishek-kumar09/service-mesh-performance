syntax = "proto3";

package SMP;

option go_package = "spec;spec";

import "google/protobuf/timestamp.proto";
import "sm.proto";

message PerformanceTestConfig {
  message Client {
    enum Protocol {
      http = 0;
      tcp = 1;
      udp = 2;
      grpc = 3;
    }
    bool internal = 1;
    string load_generator = 2;
    Protocol protocol = 3;
    int32 connections = 4;
    int64 rps = 5;
    map<string, string> headers = 6;
    map<string, string> cookies = 7;
    string body = 8;
    string content_type = 9;
    repeated string endpoint_url = 10;
  }
  // Spec version
  string smp_version = 1;
  string id = 2;
  string name = 3;
  map<string, string> labels = 4;
  // Single or distributed load generators
  repeated Client clients = 5;
  // Length of time the endpoint will be under load
  string duration = 6;
}

message PerformanceTestResult {
  // latency histogram in ms and average
  message Latency {
    double min = 1;
    double average = 2;
    double p50 = 3;
    double p90 = 4;
    double p99 = 5;
    double max = 6;
  }
  // Spec version
  string smp_version = 1;
  string id = 2;
  map<string, string> labels = 3;
  // All times in UTC
  google.protobuf.Timestamp start_time = 4;
  google.protobuf.Timestamp end_time = 5;
  Latency latencies_ms = 6;
  double actual_QPS = 7;
  string details_uri = 8;
  string testId = 9;
  string meshConfigId = 10;
  string envId = 11;
}

message ServiceMeshConfig {
  message IngressGateway {
    int32 count = 1;
    // cpu in mCores
    int32 cpu_mCores = 2;
    // memory in MB
    int32 mem_mb = 3;
    // traffic sent thru ingress gateway
    int32 rps = 4;
    // Total bytes sent thru ingress
    int32 bps = 5;
  }
  message EgressGateway {
    int32 count = 1;
    // cpu in mCores
    int32 cpu_mCores = 2;
    // memory in MB
    int32 mem_mb = 3;
    // traffic sent thru egress gateway
    int32 rps = 4;
    // Total bytes sent thru egress
    int32 bps = 5;
  }
  message Sidecar {
    int32 count = 1;
    // cpu used by all sidecars except ingress / egress
    int32 cpu_mCores = 2;
    int32 mem_mb = 3;
    // Total rps traversing all sidecars
    int32 rps = 4;
    // Total bytes sent thru sidecars
    int32 bps = 5;
  }
  message MeshTelemetry {
    int32 count = 1;
    // cpu used by all mesh_telemetry pods
    int32 cpu_mCores = 2;
    int32 mem_mb = 3;
    // Total rps traversing all proxies (sidecars+ingress+egress)
    int32 rps = 4;
  }
  message MeshPolicy {
    int32 count = 1;
    // cpu used by all mesh_policy pods
    int32 cpu_mCores = 2;
    int32 mem_mb = 3;
    // Total rps traversing all proxies (sidecars+ingress+egress)
    int32 rps = 4;
    int32 cache_hit_rate = 5;
  }
  message MeshControlPlane {
    int32 count = 1;
    // cpu used by mesh_pilot pods
    int32 cpu_mCores = 2;
    int32 mem_mb = 3;
    int32 endpoints = 4;
    // services + service entries
    int32 services = 5;
    int32 sidecars = 6;
    int32 virtual_services = 7;
    int32 destination_rules = 8;
    // how long does it take a listener change to propagate to 90% proxies
    int32 lds_latency_ms = 9;
    // how long does it take for cluster change to propagate to 90% proxies
    int32 cds_latency_ms = 10;
  }
  string smp_version = 1;
  string id = 2;
  map<string, string> labels = 3;
  IngressGateway ingress_gateway = 4;
  Sidecar sidecar = 5;
  MeshTelemetry mesh_telemetry = 6;
  MeshPolicy mesh_policy = 7;
  MeshControlPlane mesh_control_plane = 8;
  bool mesh_policy_enabled = 9;
  bool mesh_telemetry_enabled = 10;
  bool mtls_enabled = 11;
  int32 proxy_concurrency = 12;
  string mesh_build = 13;
  string proxy_build = 14;
  string exp_group_uuid = 15;
  string exp_uuid = 16;
  string profile = 17;
  ServiceMeshes mesh_type = 18;
}

message EnvironmentConfig {
  message Node {
    string type = 1;
    int32 cores = 2;
    int64 mem_mb = 3;
  }
  message IndividualWorkload {
    string name = 1;
    int32 count = 2;
    int32 cpu_mCores = 3;
    int32 mem_mb = 4;
  }
  string smp_version = 1;
  string id = 2;
  map<string, string> labels = 3;
  string kubernetes_version = 4;
  repeated Node node = 5;
  repeated IndividualWorkload individual_workloads = 6;
}
